module SGHelpers
  def build_path(parent, name)
    if parent
      "#{parent.path}/#{name}"
    else
      "./#{name}"
    end
  end
end

module SGHTMLHelpers
  def toHTML line
    case line
    when title
      to_h1_tag line.sub(title, '')
    when subtitle
      to_h2_tag line.sub(subtitle, '')
    when paragraph
      to_p_tag line
    else
      puts "DID NOT KNOW WHAT TO DO"
      "<blink></blink>"
    end
  end

  def title
    /^#\s/
  end

  def subtitle
    /^##\s/
  end

  def paragraph
    /^[a-zA-Z\d]/
  end

  def to_h1_tag text
    "<h1 id=\"#{to_id text}\">#{text}</h1>"
  end

  def to_h2_tag text
    "<h2 id=\"#{to_id text}\">#{text}</h2>"
  end

  def to_p_tag text
    "<p>#{text}</p>"
  end

  def to_id text
    text.downcase.gsub(' ', '-')
  end
end

class SGFile
  include SGHelpers
  attr_accessor :name
  def initialize(parent, name)
    @parent = parent
    @name = name
  end

  def path
    build_path @parent, @name
  end

  def process
  end
end

class SGMarkdownFile < SGFile
  include SGHTMLHelpers
  def process
    File
      .readlines(path)
      .map(&:chomp)
      .filter { |f| !f.empty? }
      .map { |f| toHTML f }
      .join("\n")
  end
end

class SGHTMLFile < SGFile
  def process
    File.read(path)
  end
end

class SGImageFile < SGFile
  def process
  end
end

class SGDir
  include SGHelpers
  attr_accessor :name
  def initialize(name, parent = nil)
    @name = name
    @parent = parent
    @directories = []
    @files = []
  end

  def process
    Dir.foreach(p) do |p|
      if File.directory? p
        @directories.push SGDir.new(p, self) unless bad_dir? p
      else
        @files.push build_file(p) unless bad_file? p
      end
    end

    @directories.each do |d|
      d.process
    end

    @files.each do |f|
      puts f.process
    end
  end

  def path
    build_path @parent, @name
  end

  private
  def bad_dir? d
    d == '.' or d == '..' or d.start_with? '.'
  end

  def bad_file? f
    f.include? 'swp' or f.start_with? '.'
  end

  def build_file path
    case File.extname path
    when /jpg|jpeg|png/
      SGImageFile.new self, path
    when /html/
      SGHTMLFile.new self, path
    when /md/
      SGMarkdownFile.new self, path
    else
      SGFile.new self, path
    end
  end
end

d = SGDir.new 'www'
d.process
